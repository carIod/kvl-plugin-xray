#!/bin/sh

VERSION=1.0.0
PR_NAME="Xray-core"
PR_TYPE="–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏"
DESCRIPTION="Xray (vless/ss)"
TEMPLATES="/opt/apps/kvl/bin/plugins/templates"
PROC=xray
CONF="/opt/etc/kvl/xray-conf.json"
ARGS="run -c $CONF"
#========================================================================================================================================
# –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ ( –º–µ—Ç–æ–¥ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å tproxy - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏ wg - POINT-TO-POINT —Ç—É–Ω–µ–ª—å)
METOD=tproxy
#–ö–∞–∫ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å TCP –ø–∞–∫–µ—Ç—ã –∏–∑ iptables –≤ –º–æ–¥—É–ª—å —á–µ—Ä–µ–∑ dnat –∏–ª–∏ tproxy
TCP_WAY=tproxy
LOCAL_PORT=1181
#============================================= —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ==================================================================
PING_COUNT=10
PING_TIMEOUT=1
TEST_PORT=1888
URL_TEST="http://cachefly.cachefly.net/10mb.test"
#========================================================================================================================================

ansi_red="\033[1;31m";
ansi_white="\033[1;37m";
ansi_green="\033[1;32m";
ansi_yellow="\033[1;33m";
ansi_blue="\033[36m";
#ansi_bell="\007";
#ansi_blink="\033[5m";
#ansi_rev="\033[7m";
#ansi_ul="\033[4m";
ansi_std="\033[m";
# –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤—ã–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç opkg install ca-certificates )
export SSL_CERT_DIR=/opt/etc/ssl/certs

if [ -t 1 ]; then
  INTERACTIVE=1
else
  INTERACTIVE=0
fi
get_pid() {
  pgrep -f "$PROC.*-c $CONF" 2>/dev/null || echo ""
  #ps | grep "$PROC" | grep -F -- "-c $CONF" | grep -v grep | awk '{print $1}' # for POSIX
}
# –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ –ª–∏–Ω–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã
length=$(stty size 2>/dev/null | cut -d' ' -f2)
[ -n "${length}" ] && [ "${length}" -gt 80 ] && LENGTH=$((length*2/3)) || LENGTH=68
# –ü–µ—á–∞—Ç–∞–µ—Ç –ª–∏–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã stty
print_line() {
	len=$((LENGTH))
	printf "%${len}s\n" | tr " " "-"
}
# –ü–æ–ª—É—á–µ–Ω–∏–µ ip –∞–¥—Ä–µ—Å–∞ —Ö–æ—Å—Ç–∞
resolve_ip() {
    local host="$1"
    local dns_server="127.0.0.1"
    nslookup "$host" "$dns_server" 2>/dev/null | \
        awk '/^Address [0-9]+: / && $3 !~ /^127\./ && $3 !~ /:/ { print $3; exit }'
}

# ------------------------------------------------------------------------------------------
#	 –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–∏–∫–ª–µ
#	 $1 - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
#	 $2 - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#	 $3 - —Ç–∏–ø –≤–≤–æ–¥–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è #		 (digit) - —Ü–∏—Ñ—Ä–∞  (password) - –ø–∞—Ä–æ–ª—å –±–µ–∑ –ø–æ–∫–∞–∑–∞ –≤–≤–æ–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
# ------------------------------------------------------------------------------------------
read_value() {
	header="$(echo "${1}" | tr -d '?')"
	type="${3}"

	while true; do
		echo -en "${header}${ansi_std} [Q-–≤—ã—Ö–æ–¥]  "
		if [ "${type}" = 'password' ]; then read -rs value; else read -r value; fi
		if [ -z "${value}" ]; then
				echo
				print_line
				echo -e "${ansi_red}–î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!"
				echo -e "${ansi_green}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞...${ansi_std}"
				print_line
		elif echo "${value}" | grep -qiE '^Q$' ; then
				eval "${2}=q"
				break
		elif [ "${type}" = 'digit' ] && ! echo "${value}" | grep -qE '^[[:digit:]]{1,6}$'; then
				echo
				print_line
				echo -e "${ansi_red}–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏!"
				echo -e "${ansi_green}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞...${ansi_std}"
				print_line
		elif [ "${type}" = 'password' ] && ! echo "${value}" | grep -qE '^[a-zA-Z0-9]{8,1024}$' ; then
				echo
				print_line
				echo -e "${ansi_green}–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 –∑–Ω–∞–∫–æ–≤ –∏"
				echo -e "${ansi_green}–¢–û–õ–¨–ö–û –±—É–∫–≤—ã –∏ –¶–ò–§–†–´, ${ansi_red}–±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤!${ansi_std}"
				echo -e "${ansi_red}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞...${ansi_std}"
				print_line
		else
				eval "${2}=\"\$value\""
				break
		fi
	done
}

url_decode() {
  local encoded="${1//+/ }"
  printf '%b' "${encoded//%/\\x}"
}

get_param() {
  local query="$1"
  local key="$2"
  local default="${3:-}"  # —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  local val
  val=$(echo "$query" | awk -F'&' -v key="$key" '{
    for (i=1; i<=NF; i++) {
      if ($i ~ "^" key "=") {
        print substr($i, length(key)+2)
        exit
      }
    }
  }')
  if [ -z "$val" ]; then
    echo "$default"
  else
    url_decode "$val"
  fi
}

read_fake_sni() {
    local disguise
    if [ "$special" = "fake" ]; then
      disguise="y"
    else  
      echo -e "${ansi_white}üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è VLESS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (tls –∏–ª–∏ xtls).${ansi_std}"
      echo -e ""
      echo "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥ —Ç—Ä–∞—Ñ–∏–∫–∞, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π HTTPS-–∑–∞–ø—Ä–æ—Å."
      echo "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞."
      echo "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Å–µ—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏."
      echo ""
      read_value "${ansi_yellow}üïµÔ∏è –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º–∞—Å–∫–∏—Ä–æ–≤–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞? (y/n)" disguise || disguise="y"
    fi  
    case "$disguise" in
        [Yy]*)
            echo ""
            echo "‚ÑπÔ∏è SNI (Server Name Indication) ‚Äî —ç—Ç–æ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –∫–ª–∏–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."
            echo "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –¥–æ–º–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã SNI –≤ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö."
            echo ""
            echo "‚ö†Ô∏è –í–ê–ñ–ù–û: –¥–ª—è —ç—Ç–æ–π –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –º—ã –≤–∫–ª—é—á–∞–µ–º –æ–ø—Ü–∏—é 'allowInsecure' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö TLS."
            echo "–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Ü–µ–Ω—Ç—Ä–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."
            echo "–†–∏—Å–∫: –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –º–æ–∂–µ—Ç –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∞—Ç–∞–∫—É '—á–µ–ª–æ–≤–µ–∫ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ' (MITM), –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–≤ —Ç—Ä–∞—Ñ–∏–∫."
            echo "–û–¥–Ω–∞–∫–æ –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ HTTPS-—Å–∞–π—Ç—ã, –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å—Ç–∞—ë—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö."
            echo "–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ—Å—å –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É, –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ—Ç —Ä–∏—Å–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–≥–¥–∞, —Ç–∞–∫ —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç."
            echo ""
            read_value "${ansi_green} –í–≤–µ–¥–∏—Ç–µ SNI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞)" sni
            echo ""
            if [ -z "$sni" ] || [[ "$sni" =~ ^[Qq]$ ]]; then
              exit 1
            fi  
            special="fake"
            ;;
        [Qq]*) 
            exit 1 
            ;;   
        *)
            special=""
            ;;
    esac
}

read_fake_host() {
    local disguise
    if [ "$special" = "fake" ]; then
      disguise="y"
    else  
      disguise="n"
    fi  
    case "$disguise" in
        [Yy]*)
            echo ""
            echo "‚ÑπÔ∏è Host-–∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑—ã–≤–∞–µ—Ç, –∫ –∫–∞–∫–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ HTTP."
            echo "–£–∫–∞–∑–∞–≤ —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω, —á—Ç–æ –∏ –≤ SNI, –≤—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö."
            echo ""
            read_value "${ansi_green} –í–≤–µ–¥–∏—Ç–µ Host-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞)" header_host
            if [ -z "$sni" ] || [[ "$sni" =~ ^[Qq]$ ]]; then
              exit 1
            fi
            special="fake"
            ;;
        [Qq]*) 
            exit 1 
            ;;   
        *)
            special=""
            ;;
    esac
}

parse_vless(){
  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å vless://
  local core="${1#vless://}"
  local local_port="$2"
  local cfg_file="$3"

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ # –≤ —Å—Ç—Ä–æ–∫–µ
  if [[ "$core" == *"#"* ]]; then
    desc="${core#*#}"
    core="${core%%#*}"
  else
    desc=""
  fi
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç @
  if [[ "$core" != *"@"* ]]; then
    echo -e "${ansi_red}–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç @)${ansi_std}" >&2
    return 1
  fi
  # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID, host –∏ port
  uuid="${core%%@*}"
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç UUID
  if [[ ! "$uuid" =~ ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$ ]]; then
    echo -e "${ansi_yellow}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: UUID –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π${ansi_std}" >&2
  fi
  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É host:port
  hostport="${core#*@}"
  hostport="${hostport%%\?*}"
  if [[ ! "$hostport" =~ ^[^:]+:[0-9]+$ ]]; then
    echo -e "${ansi_red}–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç host:port${ansi_std}" >&2
    return 1
  fi  
  if [[ "$hostport" != *:* || "$hostport" == *:*:* ]]; then
    echo -e "${ansi_red}–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç host:port${ansi_std}" >&2
  fi
  host="${hostport%:*}"
  port="${hostport#*:}"
  if [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
    echo -e "${ansi_red}‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-65535)${ansi_std}" >&2
    return 1
  fi
  # –ò–∑–≤–ª–µ–∫–∞–µ–º query (–≤—Å—ë –ø–æ—Å–ª–µ ?)
  query="${core#*\?}"
  # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  # –ë–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö none, tls, xtls, reality, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
  security=$(get_param "$query" security)
  # –°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ tcp, kcp, ws, http, grpc
  network=$(get_param "$query" type)
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if [ -z "$uuid" ] || [ -z "$host" ] || [ -z "$port" ] || [ -z "$security" ] || [ -z "$network" ]; then
    echo -e "${ansi_red}‚ùå –û—à–∏–±–∫–∞: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å—Å—ã–ª–∫–µ${ansi_std}"
    return 1
  fi
  # VLESS –≤—Å–µ–≥–¥–∞ none, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π  
  encryption=$(get_param "$query" encryption "none")
  # –ü—É—Ç—å –∫ WebSocket –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ /, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
  path=$(get_param "$query" path "/")
  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ WebSocket Host
  header_host=$(get_param "$query" host)
  # TLS SNI, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—É –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ serverName –ü—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ remote-host.
  sni=$(get_param "$query" sni)
  pub_key=$(get_param "$query" pbk)
  short_id=$(get_param "$query" sid)
  browser_fp=$(get_param "$query" fp)
  spiderX=$(get_param "$query" spx)
  alpn=$(get_param "$query" alpn)

  if [ -n "$alpn" ]; then
    alpn="\"$(echo "$alpn" | sed 's/,/", "/g')\""
  fi  

  special=""
  if [ "$security" = "tls" ] || [ "$security" = "xtls" ]; then
    [ -z "$sni" ] && read_fake_sni
    [ -z "$sni" ] && sni="$host"
  fi

  if [ "$network" = "ws"  ] || [ "$network" = "http" ]; then
    [ -z "$header_host" ] && read_fake_host
  fi

  local template="$TEMPLATES/vless-$network-$security"
  if [ -n "$special" ]; then
      template="$template-$special"
  fi
  template="$template.conf"
  echo -e "${ansi_blue}üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω: $template${ansi_std}"
  local bak="${CONF}.bak"

  if [ ! -f "$template" ]; then
    echo -e "${ansi_red}‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: $template${ansi_std}"
    return 1
  fi

  # –ë—ç–∫–∞–ø
  if [ -f "$CONF" ] && [ "$cfg_file" = "$CONF" ]; then
    mv "$CONF" "$bak"
    echo -e "${ansi_yellow}üîÅ –°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ $bak${ansi_std}"
  fi
  sed \
    -e "s|__description__|$desc|g" \
    -e "s|__local_port__|$local_port|g" \
    -e "s|__UUID__|$uuid|g" \
    -e "s|__host__|$host|g" \
    -e "s|__port__|$port|g" \
    -e "s|__encryption__|$encryption|g" \
    -e "s|__network__|$network|g" \
    -e "s|__security__|$security|g" \
    -e "s|__sni__|$sni|g" \
    -e "s|__path__|$path|g" \
    -e "s|__header_host__|$header_host|g" \
    -e "s|__network__|$password|g" \
    -e "s|__browser_fp__|$browser_fp|g" \
    -e "s|__pub_key__|$pub_key|g" \
    -e "s|__short_id__|$short_id|g" \
    -e "s|__spiderX__|$spiderX|g" \
    -e "s|__alpn__|$alpn|g" \
  "$template" > "${cfg_file}"
  echo -e "${ansi_white}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω${ansi_std}"
}

parse_shadowsocks(){
    local url="${1#ss://}"
    local local_port="$2"
    local cfg_file="$3"
    local full decoded creds method password host port

    # 1. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç @ ‚Äî —ç—Ç–æ SIP002
    if echo "$url" | grep -q '@'; then
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å ss://<base64(method:password)>@host:port –∏–ª–∏ ss://method:password@host:port
        full="${url%%@*}"           # –¥–æ @
        rest="${url#*@}"            # –ø–æ—Å–ª–µ @

        # –ü–æ–ø—Ä–æ–±—É–µ–º base64-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ ':'
        decoded=$(echo "$full" | base64 -d 2>/dev/null)

        if echo "$decoded" | grep -q ':'; then
            creds="$decoded"
        else
            creds="$full" # –Ω–µ base64, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        fi

        method="${creds%%:*}"
        password="${creds#*:}"

        host="${rest%%:*}"
        port="${rest#*:}"
        port="${port%%/*}"  # —É–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –ø–æ—Ä—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if echo "$url" | grep -q '[?&]plugin='; then
          echo -e "${ansi_red}‚ùå Shadowsocks —Å plugin (–Ω–∞–ø—Ä–∏–º–µ—Ä, obfs-local –∏–ª–∏ v2ray-plugin) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Xray${ansi_std}"
          return 1
        fi
    else
        # –≠—Ç–æ base64(full_uri) —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        decoded=$(echo "$url" | sed 's/#.*//' | base64 -d 2>/dev/null)
        method="${decoded%%:*}"
        rest="${decoded#*:}"
        password="${rest%%@*}"
        rest="${rest#*@}"
        host="${rest%%:*}"
        port="${rest#*:}"
    fi
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
    if [ -z "$method" ] || [ -z "$password" ] || [ -z "$host" ] || [ -z "$port" ]; then
        echo -e "${ansi_red}‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ Shadowsocks-—Å—Å—ã–ª–∫–∏: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤${ansi_std}"
        return 1
    fi
    
    local template="$TEMPLATES/ss-aead.conf"
    local bak="${CONF}.bak"

    if [ ! -f "$template" ]; then
        echo -e "${ansi_red}‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: $template${ansi_std}"
        return 1
    fi
    echo "üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω: $template"
    # –ë—ç–∫–∞–ø
    if [ -f "$CONF" ] && [ "$cfg_file" = "$CONF" ]; then
        mv "$CONF" "$bak"
        echo -e "${ansi_yellow}üîÅ –°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ $bak${ansi_std}"
    fi
    sed \
        -e "s|__local_port__|$local_port|g" \
        -e "s|__host__|$host|g" \
        -e "s|__port__|$port|g" \
        -e "s|__method__|$method|g" \
        -e "s|__password__|$password|g" \
        "$template" > "${cfg_file}"
    echo -e "${ansi_white}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω${ansi_std}"

}

url_config() {
  local link="$1"
  [ -z "$CONF" ] && echo -e "${ansi_red}‚ùå –ù–µ –∑–∞–¥–∞–Ω –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É \$CONF${ansi_std}" && return 1
	[ -z "$link" ] && read_value "${ansi_green}üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É Xray (ss:// –∏–ª–∏ vless://)" link
	[ -z "$link" ] || [[ "$link" =~ ^[Qq]$ ]]  && return 1
  case "$link" in
    vless://*) parse_vless "$link" "$LOCAL_PORT" "$CONF" ;;
    ss://*) parse_shadowsocks "$link" "$LOCAL_PORT" "$CONF" ;;
#    trojan://*) parse_trojan "$link" ;;
    *) echo -e "${ansi_red}–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª${ansi_std}"; return 1 ;;
  esac
}

ping_start_bg() {
    local ping_host="$1"
    (
      ping -c "$PING_COUNT" -W "$PING_TIMEOUT" "$ping_host" 2>&1 
      echo -e "${ansi_yellow}‚ö†Ô∏è  –ü–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ —Ç–µ—Å—Ç—ã –≤—Å—ë –µ—â—ë –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...${ansi_std}"
    ) & 
    PING_PID=$!
}

start_speed_test() {
  local log_file="$1"
  local max_attempts=3
  local attempt=1

  while [ $attempt -le $max_attempts ]; do
    speed_test=$(curl -s --max-time 60 -w "%{http_code}|%{size_download}|%{time_namelookup}|%{time_connect}|%{time_starttransfer}|%{time_total}|%{speed_download}\n" \
        -x http://127.0.0.1:$TEST_PORT -o /dev/null "$URL_TEST")

    IFS='|' read -r http_code size_file t_namelookup t_connect t_starttransfer t_total speed_bytes <<EOF
$speed_test
EOF
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—Ö: –∫–æ–¥ 200 –∏ —Ä–∞–∑–º–µ—Ä —Ö–æ—Ç—è –±—ã 10 –ú–ë (10485760 –±–∞–π—Ç)
    if [ "$http_code" = "200" ] && [ "$size_file" -ge 10485760 ]; then
      return 0
    fi
    echo "–ü–æ–ø—ã—Ç–∫–∞ $attempt –∏–∑ $max_attempts –Ω–µ —É–¥–∞–ª–∞—Å—å (–∫–æ–¥: $http_code, —Ä–∞–∑–º–µ—Ä: $size_file –±–∞–π—Ç, —Å–∫–æ—Ä–æ—Å—Ç—å $speed_bytes –±–∞–π—Ç/—Å), –ø–æ–≤—Ç–æ—Ä ..." >> "$log_file"
    attempt=$((attempt + 1))
    sleep 2
  done
  return 1
}

replace_inbounds() {
  local file_conf="$1"
  local file_log="$2"
  awk -v testport="$TEST_PORT" '
  /"inbounds"\s*:/ {
    print "\"inbounds\": ["
    print "  {\"port\": "testport", \"listen\": \"127.0.0.1\", \"protocol\": \"http\", \"settings\": {}}"
    skip=1
    next
  }
  skip {
    # –ò—â–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –º–∞—Å—Å–∏–≤–∞
    if ($0 ~ /^\s*]\s*,?\s*$/) {
      print "],"
      skip=0
    }
    next
  }
  { print }
  ' "$file_conf" > "${file_conf}.mod" && mv "${file_conf}.mod" "$file_conf"
  
  sed -i "s|\"error\": \".*\"|\"error\": \"$file_log\"|" "$file_conf"
  sed -i "s|\"loglevel\": \".*\"|\"loglevel\": \"debug\"|" "$file_conf"
}

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Ä–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —É–±–∏—Ç—å –∏ –¥–æ—á–µ—Ä–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å
cleanup_test() {
  if [ -n "$PING_PID" ] && kill -0 "$PING_PID" 2>/dev/null; then
    kill "$PING_PID" 2>/dev/null
  fi
  if [ -n "$XRAY_PID" ] && kill -0 "$XRAY_PID" 2>/dev/null; then
    kill "$XRAY_PID" 2>/dev/null
  fi  
}

test_url(){
  local link="$1"
  [ -z "$link" ] && read_value "${ansi_green}üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É Xray (ss:// –∏–ª–∏ vless://)" link
  [ -z "$link" ] || [[ "$link" =~ ^[Qq]$ ]]  && return 1
  local temp_conf="/tmp/xray-test.json"
  local temp_pid="/tmp/xray-test.pid"
  local temp_log="/tmp/xray-test.log"
  local temp_std="/tmp/xray-test.std"
  local server_address
  trap cleanup_test EXIT INT TERM
  case "$link" in
    vless://*) 
        parse_vless "$link" "$TEST_PORT" "$temp_conf" 
        server_address=$(sed 's|//.*||; s|#.*||; /^$/d' "$temp_conf" | jq -r '.outbounds[0].settings.vnext[0].address')
        ;;
    ss://*) 
        parse_shadowsocks "$link" "$TEST_PORT" "$temp_conf" 
        server_address=$(sed 's|//.*||; s|#.*||; /^$/d' "$temp_conf" | jq -r '.outbounds[0].settings.servers[0].address')
        ;;
  esac
  [ ! -f "$temp_conf" ] && echo -e "${ansi_red}‚ùå –ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${temp_conf}${ansi_std}" && return 1
  # –ó–∞–º–µ–Ω—è–µ–º inbounds –Ω–∞ HTTP-–ø—Ä–æ–∫—Å–∏
  replace_inbounds "$temp_conf" "$temp_log"
  
  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
  echo -e "${ansi_blue}–ó–∞–ø—É—Å–∫–∞–µ–º xray —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Ñ–æ–Ω–µ${ansi_std}"
  echo -e "${ansi_white}–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî –æ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤${ansi_std}"
  ping_start_bg "$server_address"
  : > "$temp_std"
  
    # –ó–∞–ø—É—Å–∫ xray –≤–æ —Ñ–æ–Ω–µ
  xray run -c "$temp_conf" >"$temp_log" 2>&1 &
  XRAY_PID=$!
  echo "$XRAY_PID" > "$temp_pid"
    # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–º–∞–∫—Å 10 —Å–µ–∫—É–Ω–¥)
    i=0
    while [ "$i" -lt 10 ]; do
      if kill -0 "$XRAY_PID" 2>/dev/null; then
        echo -e "${ansi_green}‚úÖ Xray test instance –±—ã–ª –∑–∞–ø—É—â–µ–Ω (PID: $XRAY_PID)${ansi_std}" >> $temp_std
        break
      fi
    sleep 1
    i=$((i + 1))
  done
  # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É—Å–ø–µ–ª –ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
  if ! kill -0 "$XRAY_PID" 2>/dev/null; then
    echo -e "${ansi_red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Xray test instance${ansi_std}" >> $temp_std
    [ -f "$temp_log" ] && { echo "--- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞ ---"; cat "$temp_log"; } >> $temp_std
    return 1
  fi
  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–≥ —Ñ–∞–π–ª–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è 
  i=0
  success=0
  while [ $i -lt 10 ]; do
      sleep 1
      # –ï—Å–ª–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç ‚Äî —É—Å–ø–µ—Ö
      if netstat -lnpt 2>/dev/null | grep -q ":$TEST_PORT"; then
        success=1
        break
      fi
      if grep -q "Failed to start" "$temp_log"; then
        success=0
        break
      fi
      i=$((i + 1))
  done

  if [ "$success" -eq 0 ]; then
      echo -e "${ansi_red}‚ùå –û—à–∏–±–∫–∞: –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è –ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: $TEST_PORT${ansi_std}" >> "$temp_std"
      cat "$temp_log"
      kill "$XRAY_PID" 2>/dev/null
      rm -f "$temp_conf" "$temp_log" "$temp_pid"
      return 1
  fi

  echo -e "${ansi_white}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –Ω–∞ myip.wtf ...${ansi_std}" >> "$temp_std"
  local output
  local flag_speed_test=0
  output=$(curl -s --max-time 10 -x http://127.0.0.1:$TEST_PORT https://myip.wtf/json)
  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω
  if echo "$output" | grep -q '"YourFuckingIPAddress"'; then
    echo -e "${ansi_green}‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ myip.wtf:${ansi_std}" >> "$temp_std"
    echo -e "${ansi_white}   üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏ ...${ansi_std}" >> "$temp_std"
    
    if start_speed_test "$temp_std"; then
      # –í—ã—á–∏—Å–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é awk
      echo -e "${ansi_green}    ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏${ansi_std}" >> "$temp_std"
      flag_speed_test=1
      latency_ms=$(awk "BEGIN { printf \"%.2f\", ($t_connect - $t_namelookup) * 1000 }")
      wait_ms=$(awk "BEGIN { printf \"%.2f\", ($t_starttransfer - $t_connect) * 1000 }")
      download_time_s=$(awk "BEGIN { printf \"%.2f\", $t_total - $t_starttransfer }")
      speed_mbps=$(awk "BEGIN { printf \"%.2f\", ($speed_bytes * 8) / 1000000 }")
      dns_ms=$(awk "BEGIN { printf \"%.2f\", $t_namelookup * 1000 }")   
    fi  
  fi
  
  if kill "$PING_PID" 2>/dev/null; then
    i=0
    while [ "$i" -lt 5 ]; do
        if ! kill -0 "$PING_PID" 2>/dev/null; then
            break
        fi
        sleep 1
        i=$((i + 1))
    done
    if kill -0 "$PING_PID" 2>/dev/null; then
        echo -e "${ansi_yellow}‚ö†Ô∏è PING –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ${ansi_std}" >> $temp_std
        kill -9 "$PING_PID" 2>/dev/null
    fi
  fi
  # –í—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–æ —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
  cat $temp_std

  # –£–±–∏—Ç—å xray
  echo -e "${ansi_white}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É xray${ansi_std}" 
  if kill "$XRAY_PID" 2>/dev/null; then
    i=0
    while [ "$i" -lt 5 ]; do
        if ! kill -0 "$XRAY_PID" 2>/dev/null; then
            break
        fi
        sleep 1
        i=$((i + 1))
    done
    if kill -0 "$XRAY_PID" 2>/dev/null; then
        echo -e "${ansi_yellow}‚ö†Ô∏è Xray –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ${ansi_std}"
        kill -9 "$XRAY_PID" 2>/dev/null
    fi
  fi
   

    # –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
    if echo "$output" | grep -q '"YourFuckingIPAddress"'; then
        echo -e "${ansi_green}‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫:${ansi_std}"
        echo "$output" | awk '
            /"YourFuckingIPAddress"/   { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üåê IP         : " $0 }
            /"YourFuckingLocation"/    { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üìç Location   : " $0 }
            /"YourFuckingHostname"/    { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üñ• Hostname    : " $0 }
            /"YourFuckingISP"/         { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üè¢ ISP        : " $0 }
            /"YourFuckingCity"/        { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üèô City        : " $0 }
            /"YourFuckingCountry"/     { sub(/^.*: /, ""); gsub(/[",]/,""); print "   üåé Country    : " $0 }
        '
        if [ "$flag_speed_test" = "1" ]; then
          print_line
          echo " ‚è±Ô∏è  DNS Lookup:        $dns_ms –º—Å"
          echo " ‚è±Ô∏è  –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å TCP:   $latency_ms –º—Å"
          echo " ‚è±Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞:   $wait_ms –º—Å"
          echo " ‚è±Ô∏è  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:  $download_time_s —Å–µ–∫"
          echo "     –°–∫–æ—Ä–æ—Å—Ç—å:          $speed_mbps –ú–±–∏—Ç/—Å"
          # echo " ‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è TCP+TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:  ${connect_time}s"
          # echo " ‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞                 :  ${starttransfer_time}s"
          # echo "            –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –±–æ–ª—å—à–æ–µ ‚Äî –∑–Ω–∞—á–∏—Ç —Å–µ—Ä–≤–µ—Ä —Ç–æ—Ä–º–æ–∑–∏—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –¥–∞–ª–µ–∫–æ."
          # echo " ‚è±Ô∏è  –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ (Total)           :  ${total_time}s"
        fi

    else
        echo -e "${ansi_red}‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —Å–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${ansi_std}"
        echo -e "${ansi_white}üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ /tmp/log/xray_test.log:${ansi_std}"
        print_line
        cat "$temp_log"
    fi
    # –û—á–∏—Å—Ç–∫–∞
    rm -f "$temp_conf" "$temp_pid" "$temp_log" "$temp_std"
}

start(){
  local desc="$PR_NAME $ARGS"
	# –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞/–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  [ "$INTERACTIVE" -eq 1 ] && echo -e -n "$ansi_white –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $desc ... $ansi_std"
  PID=$(get_pid)
  if [ -n "$PID" ]; then
    [ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_yellow —É–∂–µ –∑–∞–ø—É—â–µ–Ω. $ansi_std" || echo '{"status":"alive"}'
    return 0
  fi
  # shellcheck disable=SC2086 
  $PROC $ARGS > /dev/null 2>&1 &
  for i in $(seq 1 10); do
    sleep 1
    PID=$(get_pid)
    if [ -n "$PID" ]; then
      [ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_green —É—Å–ø–µ—à–Ω–æ. $ansi_std"
      logger "–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å $desc. PID=$PID"
      return 0
    fi
  done
  [ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_red –Ω–µ –∑–∞–ø—É—â–µ–Ω. $ansi_std"
  logger "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å $desc"
  return 255
}

stop() {
  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞/–æ—Ç–∫–∞—Ç
  local desc="$PR_NAME $ARGS"
  PID=$(get_pid)

	case "$1" in
      stop | restart)
          [ "$INTERACTIVE" -eq 1 ] && echo -e -n "$ansi_white –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $desc ... $ansi_std"
          [ -n "$PID" ] && kill "$PID"
        ;;
    	kill)
          [ "$INTERACTIVE" -eq 1 ] && echo -e -n "$ansi_white –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $desc ... $ansi_std"
          [ -n "$PID" ] && kill -9 "$PID"
        ;;
	esac	
  for i in $(seq 1 10); do
    sleep 1
    PID=$(get_pid)
    [ -z "$PID" ] && break
  done
  if [ -z "$PID" ]; then
    [ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_green —É—Å–ø–µ—à–Ω–æ. $ansi_std"
    logger "–ü—Ä–æ—Ü–µ—Å—Å $desc —É—Å–ø–µ—à–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω."
    return 0
  fi
	[ "$INTERACTIVE" -eq 1 ] && echo -e "            $ansi_red –æ—à–∏–±–∫–∞. $ansi_std"	
    logger "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å $desc"
    return 255
}

check() {
    local PID desc="$PR_NAME $ARGS"
    PID=$(get_pid)
    [ "$INTERACTIVE" -eq 1 ] && echo -e -n "$ansi_white –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å $desc ... $ansi_std"
    if [ -n "$PID" ]; then
        if [ "$INTERACTIVE" -eq 1 ]; then
            echo -e "            ${ansi_green}—Ä–∞–±–æ—Ç–∞–µ—Ç. $ansi_std"
        else
            echo '{"status":"alive"}'
        fi
        return 0
    else
        if [ "$INTERACTIVE" -eq 1 ]; then
            echo -e "            ${ansi_red}–Ω–µ –Ω–∞–π–¥–µ–Ω. $ansi_std"
        else
            echo '{"status":"dead"}'
        fi
        return 1
    fi
}

print_help() {
  echo -e "${ansi_green}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${ansi_std} ./xray-core.sh ${ansi_yellow}(start|restart|stop|check|status|info|get_param|set_url|test_url|help)${ansi_std}\n"

  echo -e "${ansi_blue}–ö–æ–º–∞–Ω–¥—ã –ø–ª–∞–≥–∏–Ω–∞ Xray –¥–ª—è KVL:${ansi_std}"

  echo -e "  ${ansi_yellow}start${ansi_std}        ‚Äî –ó–∞–ø—É—Å–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Xray –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
  echo -e "  ${ansi_yellow}restart${ansi_std}      ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞ Xray (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ + –∑–∞–ø—É—Å–∫)."
  echo -e "  ${ansi_yellow}stop${ansi_std}         ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Xray."
  echo -e "  ${ansi_yellow}check|status${ansi_std} ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ Xray (PID, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)."
  echo -e "  ${ansi_yellow}info${ansi_std}         ‚Äî –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–±–æ—Ä–∞:"
  echo -e "                      - —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –ø–ª–∞–≥–∏–Ω–∞,"
  echo -e "                      - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ,"
  echo -e "                      - –º–µ—Ç–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ (–¥–ª—è KVL)."
  echo -e "  ${ansi_yellow}get_param${ansi_std}    ‚Äî –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON,"
  echo -e "                      –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π KVL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ iptables –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏."
  echo -e "  ${ansi_yellow}url set${ansi_std}      ‚Äî –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (ss:// –∏–ª–∏ vless://),"
  echo -e "                      –Ω–∞ –µ—ë –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Xray."
  echo -e "  ${ansi_yellow}url test${ansi_std}     ‚Äî –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ,"
  echo -e "                      –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ https://myip.wtf/json"
  echo -e "                      –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π IP, –≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω—É, —Ö–æ—Å—Ç –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."
  echo -e "  ${ansi_yellow}help${ansi_std}         ‚Äî –í—ã–≤–æ–¥–∏—Ç —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.\n"

  echo -e "${ansi_green}–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:${ansi_std}"
  echo -e "  kvl plugin xray url set \"vless://...\""
  echo -e "  kvl plugin xray url test"
}

case "$1" in
  start)
	  start
    ;;
  stop|kill)
	  stop "$1"
    ;;
  restart)
    check > /dev/null && stop "$1"
    start
    ;;	
  check|status)
    check
    ;;	
  info)
    if [ "$INTERACTIVE" -eq 1 ]; then
      echo "–ü–ª–∞–≥–∏–Ω: $PR_NAME –í–µ—Ä—Å–∏—è: $VERSION"
		  echo "–¢–∏–ø: $PR_TYPE"
		  echo "–û–ø–∏—Å–∞–Ω–∏–µ: $DESCRIPTION"
    else
        echo "{\"name\":\"$PR_NAME\",\"description\":\"$DESCRIPTION\",\"type\":\"$PR_TYPE\",\"method\":\"$METOD\"}"
    fi
    ;;
  get_param)
    IFS='|'
    read -r local_port network server <<EOF
$(sed 's|//.*||; s|#.*||; /^$/d' "$CONF" | jq -r '
    .inbounds[0].port as $port |
    .inbounds[0].settings.network as $network |
    .outbounds[0].settings.vnext[0].address as $address |
    "\($port)|\($network)|\($address)"
    ')
EOF
    unset IFS
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UDP
    if echo "$network" | grep -q 'udp'; then
      udp="yes"
    else
      udp="no"
    fi
    ip=$(resolve_ip "$server")
    echo "{\"inface_cli\":\"$PR_NAME\",\"method\":\"$METOD\",\"udp\":\"$udp\",\"tcp_way\":\"$TCP_WAY\",\"tcp_port\":\"$local_port\",\"udp_port\":\"$local_port\",\"server_ip\":\"$ip\"}"
    ;;
  url)
    case "$2" in
      set)
        # —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ ss:// ‚Äî –ø–ª–∞–≥–∏–Ω —Å–∞–º —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
	      url_config "$3"
        ;;
      test)
        test_url "$3"
        ;;  
      *)
        echo "Usage: $0 url (set|test)" >&2; exit 1
        ;;  
    esac
    ;;
  help)  
    print_help
    ;;
  *)
    echo "Usage: $0 (start|restart|stop|check|status|info|get_param|url|help)" >&2; exit 1
    ;;
esac
